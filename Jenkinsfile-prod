pipeline {
    agent any

    environment {
    	currentDate = sh(returnStdout: true, script: 'date +%Y%m%d').trim()
    	
        current_time = """${sh(
                returnStdout: true,
                script: '(date +%H%M%S)'
            )}"""
        start_time = """${sh(
                returnStdout: true,
                script: '(date -d 08:00 +%H%M%S)'
            )}"""
        end_time = """${sh(
                returnStdout: true,
                script: '(date -d 17:30 +%H%M%S)'
            )}"""
    }

	stages {
 		stage('Clone') {
            steps {
                git branch: 'prod', credentialsId: '3c7436f6-8d07-4d18-855e-b5b6cd36d01f', url: 'https://gitlab.vietnampost.vn/groupvnpd/vnp_org_ewallet_orgweb_vue3.git'
            }
        }
        
        
        stage('Docker Build') {
            steps {
                dir('.') {
                    sh 'docker compose build'
                }
            }
        }
        
         stage('Push Image') {
            steps{ 
	            script {
		            	def buildNumber = currentBuild.number
		                def IMAGE_ID=  sh(returnStdout: true, script: "docker images --filter=reference=ew-web-org:latest --format '{{.ID}}'").trim()
						def DOCKER_TAG = "${currentDate}_${buildNumber}"
						def DOCKER_REPOSITORY = "containerregistry.vietnampost.vn/o2o-vnpd/ew-web-org"
						
						echo "currentDate is ${currentDate}"
						echo "buildNumber is ${buildNumber}"
						echo "IMAGE_ID is ${IMAGE_ID}"
						echo "DOCKER_REPOSITORY is ${DOCKER_REPOSITORY}"
						echo "DOCKER_TAG is ${DOCKER_TAG}"
						echo "docker tag ${IMAGE_ID} ${DOCKER_REPOSITORY}:${DOCKER_TAG}"
					
						def DOCKER_TAG_JFROG =  "docker tag ${IMAGE_ID} ${DOCKER_REPOSITORY}:${DOCKER_TAG}"
						
						dir('.') {
    	                sh "/jfrog_authen"
                        sh "docker tag ${IMAGE_ID} ${DOCKER_REPOSITORY}:${DOCKER_TAG}"
                        sh "docker push ${DOCKER_REPOSITORY}:${DOCKER_TAG} "
                        sh "docker logout "
                }
	                }
	                
	            
            }
        }
    }


	post {
		success {
			sh  """
			    if [[ "$current_time" > "$start_time" ]] && [[ "$current_time" < "$end_time" ]];
                   then
                	echo success
                else
                  echo not matched
                fi
			"""
		}

		unsuccessful {
			sh  """
			    if [[ "$current_time" > "$start_time" ]] && [[ "$current_time" < "$end_time" ]];
                   then
                	echo unsuccessful
                else
                  echo not matched
                fi
			"""
		}
	}
}
